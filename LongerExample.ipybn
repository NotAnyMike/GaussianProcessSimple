{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This file provides a small self-contained demonstration of a Gaussian process\n",
    "# model. The model really is just a Gaussian distribution! A few lines of\n",
    "# standard linear algebra give the conditional distributions you need to perform\n",
    "# inference. You will probably need to invest some effort to understanding this\n",
    "# demonstration, and working out the correspondence to the maths in the notes.\n",
    "# No matter what I provide, you'll need to do some hard work. But once you've\n",
    "# reproduced the ideas for yourself you should find that nothing that\n",
    "# complicated is going on.\n",
    "#\n",
    "# Alternatively, gp_altdemo.py is a simpler demo, in that it requires less\n",
    "# linear algebra, but I've used a non-standard presentation to achieve that\n",
    "# trick: it will still require thought!\n",
    "#\n",
    "# One messy detail that we do encounter is that large covariance matrices\n",
    "# constructed from the Gaussian kernel are poorly-conditioned. This script\n",
    "# applies a standard hack to work around that.\n",
    "#\n",
    "# The class notes link to several polished and featureful Gaussian process\n",
    "# toolboxes. These hide the maths from you behind user-friendly interfaces,\n",
    "# and come with more extensive demonstrations.\n",
    "#\n",
    "# Iain Murray, November 2016\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "## The kernel function\n",
    "######################################################################\n",
    "\n",
    "# This demo uses a Gaussian kernel function,\n",
    "# k(x1,x2) = sigma_f**2 * np.exp(-0.5 * np.sum(((x1-x2)/ell)**2))\n",
    "\n",
    "# We create kernel functions that take NxD and MxD design matrices, to give NxM\n",
    "# kernel values. rbf_fn is a fixed unit bandwidth RBF kernel, and\n",
    "# gauss_kernel_fn rescales that using free parameters ell (1xD or 1x1) and sigma_f (1x1).\n",
    "\n",
    "rbf_fn = lambda X1, X2: \\\n",
    "        np.exp((np.dot(X1,(2*X2.T))-np.sum(X1*X1,1)[:,None]) - np.sum(X2*X2,1)[None,:])\n",
    "gauss_kernel_fn = lambda X1, X2, ell, sigma_f: \\\n",
    "        sigma_f**2 * rbf_fn(X1/(np.sqrt(2)*ell), X2/(np.sqrt(2)*ell))\n",
    "\n",
    "# Pick some particular parameters for this demo:\n",
    "k_fn = lambda X1, X2: gauss_kernel_fn(X1, X2, 3.0, 10.0)\n",
    "\n",
    "# You could also try:\n",
    "# k_fn = lambda X1, X2: gauss_kernel_fn(X1, X2, 0.5, 1.0)\n",
    "# k_fn = lambda X1, X2: gauss_kernel_fn(X1, X2, 0.5, 1.0) + gauss_kernel_fn(X1, X2, 3.0, 10.0)\n",
    "# ...\n",
    "\n",
    "# gauss_kernel_fn is equivalent to the following slower function:\n",
    "def gauss_kernel_naive(X1, X2, ell, sigma_f):\n",
    "    N, M = X1.shape[0], X2.shape[0]\n",
    "    K = np.zeros((N, M))\n",
    "    for n in range(N):\n",
    "        for m in range(M):\n",
    "            K[n,m] = sigma_f**2 * np.exp(\n",
    "                    -0.5*np.sum(((X1[n,:]-X2[m,:])/ell)**2))\n",
    "    return K\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'f')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Sampling from the prior\n",
    "######################################################################\n",
    "\n",
    "# Pick the input locations that we want to see the function at.\n",
    "X_grid = np.arange(0, 10, 0.02)[:,None]\n",
    "\n",
    "# Compute covariance of function values for those points. The Gaussian kernel\n",
    "# gives positive definite matrices in theory. In practice, we need to add a tiny\n",
    "# amount of noise to the process (a \"jitter\" or \"nugget\" term) if we need a\n",
    "# matrix that is positive definite given finite numerical precision.\n",
    "N_grid = X_grid.shape[0]\n",
    "K_grid = k_fn(X_grid, X_grid) + 1e-9*np.eye(N_grid)\n",
    "\n",
    "# To sample from Gausian with covariance K=L*L',\n",
    "# we just multiply L by a vector standard normals:\n",
    "L_grid = np.linalg.cholesky(K_grid)\n",
    "plt.figure(1)\n",
    "plt.clf()\n",
    "for ii in range(3):\n",
    "    f_grid = np.dot(L_grid, np.random.randn(N_grid))\n",
    "    plt.plot(X_grid, f_grid, '-')\n",
    "\n",
    "plt.legend(['prior sample 1', 'prior sample 2', 'prior sample 3'])\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('f')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Sampling from the prior in two stages\n",
    "######################################################################\n",
    "\n",
    "# We don't have to sample \"the whole\" function, or a dense grid.\n",
    "\n",
    "# Pick four of the original grid points, just sample a setting of those and plot as crosses:\n",
    "idx = np.round(N_grid*np.array([0.2,0.4,0.6,0.8])).astype(int)\n",
    "X_locs1 = X_grid[idx, :]\n",
    "N_locs1 = idx.size\n",
    "K_locs1 = k_fn(X_locs1, X_locs1)\n",
    "L_locs1 = np.linalg.cholesky(K_locs1)\n",
    "plt.figure(2)\n",
    "plt.clf()\n",
    "noise_var = 0.0 # add no noise to the samples, we want to look at function values\n",
    "#noise_var = 1.0 # add some noise to the samples, we want to simulate data\n",
    "f_locs1 = np.dot(L_locs1, np.random.randn(N_locs1)) + \\\n",
    "        np.sqrt(noise_var)*np.random.randn(N_locs1)\n",
    "plt.plot(X_locs1, f_locs1, 'x', markersize=20, markeredgewidth=2)\n",
    "\n",
    "# We could later choose to sample any of the other function values, conditioned\n",
    "# on the ones we already picked. We compute all the relevant covariances, and\n",
    "# apply standard formulae to get the mean and covariance of the Gaussian over\n",
    "# the remaining function values, conditioned on the ones we've already picked.\n",
    "X_rest = np.delete(X_grid, idx, 0)\n",
    "K_rest = k_fn(X_rest, X_rest)\n",
    "K_rest_locs1 = k_fn(X_rest, X_locs1)\n",
    "M = K_locs1 + noise_var*np.eye(N_locs1)\n",
    "# We could compute cholesky(M) once and use it to solve both the linear systems in the next two lines\n",
    "rest_cond_mu = np.dot(K_rest_locs1, np.linalg.solve(M, f_locs1))\n",
    "rest_cond_cov = K_rest - np.dot(K_rest_locs1, np.linalg.solve(M, K_rest_locs1.T))\n",
    "\n",
    "# Then we sample 3 different completions of the f_locs1 function values that we\n",
    "# sampled above. Each completion by itself is just illustrating a sample of the\n",
    "# function from the prior. The different completions illustrate different\n",
    "# samples from the posterior at test locations, given a set of observed function\n",
    "# values.\n",
    "N_rest = X_rest.shape[0]\n",
    "L_rest = np.linalg.cholesky(rest_cond_cov + 1e-9*np.eye(N_rest))\n",
    "for ii in range(3):\n",
    "    rest_sample = np.dot(L_rest, np.random.randn(N_rest)) + rest_cond_mu\n",
    "    plt.plot(X_rest, rest_sample, '-')\n",
    "\n",
    "# If you change noise_var from 0.0 to 1.0 above, you can simulate first looking\n",
    "# at noisy values of the function. The conditional distribution is then the\n",
    "# posterior over some function values given some noisy observations.\n",
    "\n",
    "# If you'd rather plot the mean prediction and error bars rather than samples,\n",
    "# you can do that too. The thick black solid line shows the mean, and dashed\n",
    "# thick black lines show +/- 2 standard deviations -- at any particular\n",
    "# location, we have ~95% belief the function will lie in this range.\n",
    "plt.plot(X_rest, rest_cond_mu, '-k', linewidth=2)\n",
    "rest_cond_std = np.sqrt(np.diag(rest_cond_cov))\n",
    "plt.plot(X_rest, rest_cond_mu + 2*rest_cond_std, '--k', linewidth=2)\n",
    "plt.plot(X_rest, rest_cond_mu - 2*rest_cond_std, '--k', linewidth=2)\n",
    "# The mean and error bars can be computed more cheaply if you don't want to know\n",
    "# the whole posterior. See the notes.\n",
    "\n",
    "plt.legend(['Initial Samples', 'completion 1', 'completion 2', 'completion 3',\n",
    "        'mean completion', 'credible band'])\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('f')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# Final remarks:\n",
    "# --------------\n",
    "# - None of the points have to be on a grid.\n",
    "# - The initial training points X_locs1 could be anywhere.\n",
    "# - The remaining test points X_rest could be anywhere.\n",
    "# - If the points aren't sampled densely and in order, we wouldn't\n",
    "#   join them with straight lines. We'd just plot individual points.\n",
    "# - The inputs can be in D-dimensions. The kernel function is the\n",
    "#   only part of the code that looks at the original input features.\n",
    "#   None of the rest of the code cares where the scalar function\n",
    "#   values are located in input space.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
